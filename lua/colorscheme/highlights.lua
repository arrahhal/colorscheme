local palette = require("colorscheme.palette")

local highlights = {
	["@attribute.diff"] = { fg = palette.green },
	["@boolean"] = { link = "Boolean" },
	["@class"] = { fg = palette.blue },
	["@conditional"] = { link = "Conditional" },
	["@field"] = { fg = palette.blue },
	["@include"] = { link = "Include" },
	["@interface"] = { fg = palette.blue },
	["@macro"] = { link = "Macro" },
	["@method"] = { fg = palette.rose },
	["@namespace"] = { link = "Include" },
	["@number"] = { link = "Number" },
	["@parameter"] = { fg = palette.orange },
	["@preproc"] = { link = "PreProc" },
	["@punctuation"] = { fg = palette.lightgray },
	["@regexp"] = { link = "String" },
	["@repeat"] = { link = "Repeat" },
	["@storageclass"] = { link = "StorageClass" },
	["@symbol"] = { link = "Identifier" },
	["@text"] = { fg = palette.foreground },
	["@text.danger"] = { fg = palette.red },
	["@text.diff.add"] = { fg = palette.blue, bg = palette.blue, blend = 20 },
	["@text.diff.delete"] = { fg = palette.red, bg = palette.red, blend = 20 },
	["@text.emphasis"] = { italic = true },
	["@text.environment"] = { link = "Macro" },
	["@text.environment.name"] = { link = "Type" },
	["@text.math"] = { link = "Special" },
	["@text.note"] = { link = "SpecialComment" },
	["@text.strike"] = { strikethrough = true },
	["@text.strong"] = { bold = true },
	["@text.title"] = { link = "Title" },
	["@text.title.1.markdown"] = { link = "markdownH1" },
	["@text.title.1.marker.markdown"] = { link = "markdownH1Delimiter" },
	["@text.title.2.markdown"] = { link = "markdownH2" },
	["@text.title.2.marker.markdown"] = { link = "markdownH2Delimiter" },
	["@text.title.3.markdown"] = { link = "markdownH3" },
	["@text.title.3.marker.markdown"] = { link = "markdownH3Delimiter" },
	["@text.title.4.markdown"] = { link = "markdownH4" },
	["@text.title.4.marker.markdown"] = { link = "markdownH4Delimiter" },
	["@text.title.5.markdown"] = { link = "markdownH5" },
	["@text.title.5.marker.markdown"] = { link = "markdownH5Delimiter" },
	["@text.title.6.markdown"] = { link = "markdownH6" },
	["@text.title.6.marker.markdown"] = { link = "markdownH6Delimiter" },
	["@text.underline"] = { underline = true },
	["@text.uri"] = { fg = palette.orange },
	["@text.warning"] = { fg = palette.yellow },
	["@todo"] = { link = "Todo" },

	ColorColumn = { bg = palette.surface },
	Conceal = { bg = "NONE" },
	CurSearch = { fg = palette.background, bg = palette.yellow },
	Cursor = { fg = palette.foreground, bg = palette.highlight },
	CursorColumn = { bg = palette.surface },
	CursorLine = { bg = palette.surface },
	CursorLineNr = { fg = palette.yellow, bold = true },
	DiffAdd = { bg = palette.blue, blend = 20 },
	DiffChange = { bg = palette.rose, blend = 20 },
	DiffDelete = { bg = palette.red, blend = 20 },
	DiffText = { bg = palette.rose, blend = 40 },
	diffAdded = { link = "DiffAdd" },
	diffChanged = { link = "DiffChange" },
	diffRemoved = { link = "DiffDelete" },
	Directory = { fg = palette.rose, bold = true },
	ErrorMsg = { fg = palette.red, bold = true },
	FoldColumn = { fg = palette.gray },
	IncSearch = { link = "CurSearch" },
	LineNr = { fg = palette.gray },
	MatchParen = { fg = palette.blue, bg = palette.background, blend = 25, underline = true },
	ModeMsg = { fg = palette.lightgray },
	MoreMsg = { fg = palette.orange },
	NonText = { fg = palette.nc },
	NvimInternalError = { link = "ErrorMsg" },
	PmenuExtra = { fg = palette.gray, bg = palette.surface },
	PmenuExtraSel = { fg = palette.lightgray, bg = palette.surface },
	PmenuKindSel = { fg = palette.lightgray, bg = palette.surface },
	PmenuSbar = { bg = palette.surface },
	PmenuSel = { fg = palette.foreground, bg = palette.surface },
	PmenuThumb = { bg = palette.nc },
	Question = { fg = palette.yellow },
	RedrawDebugClear = { fg = palette.background, bg = palette.yellow },
	RedrawDebugComposed = { fg = palette.background, bg = palette.blue },
	RedrawDebugRecompose = { fg = palette.background, bg = palette.red },
	Search = { fg = palette.background, bg = palette.rose },
	SpecialKey = { fg = palette.cayn },
	SpellBad = { sp = palette.lightgray, undercurl = true },
	SpellCap = { sp = palette.lightgray, undercurl = true },
	SpellLocal = { sp = palette.lightgray, undercurl = true },
	SpellRare = { sp = palette.lightgray, undercurl = true },
	StatusLineTerm = { fg = palette.background, bg = palette.blue },
	StatusLineTermNC = { fg = palette.background, bg = palette.blue, blend = 60 },
	Substitute = { link = "IncSearch" },
	Title = { fg = palette.cayn, bold = true },
	VertSplit = { fg = palette.lightgray },
	Visual = { bg = palette.highlight },
	-- VisualNOS = {},
	WarningMsg = { fg = palette.yellow, bold = true },
	-- Whitespace = {},
	WildMenu = { link = "IncSearch" },
	WinBar = { fg = palette.lightgray, bg = palette.blue },
	WinBarNC = { fg = palette.nc, bg = palette.blue, blend = 60 },
	WinSeparator = { fg = palette.lightgray },

	DiagnosticError = { fg = palette.red },
	DiagnosticHint = { fg = palette.orange },
	DiagnosticInfo = { fg = palette.cayn },
	DiagnosticOk = { fg = palette.blue },
	DiagnosticWarn = { fg = palette.yellow },
	DiagnosticDefaultError = { link = "DiagnosticError" },
	DiagnosticDefaultHint = { link = "DiagnosticHint" },
	DiagnosticDefaultInfo = { link = "DiagnosticInfo" },
	DiagnosticDefaultOk = { link = "DiagnosticOk" },
	DiagnosticDefaultWarn = { link = "DiagnosticWarn" },
	DiagnosticFloatingError = { link = "DiagnosticError" },
	DiagnosticFloatingHint = { link = "DiagnosticHint" },
	DiagnosticFloatingInfo = { link = "DiagnosticInfo" },
	DiagnosticFloatingOk = { link = "DiagnosticOk" },
	DiagnosticFloatingWarn = { link = "DiagnosticWarn" },
	DiagnosticSignError = { link = "DiagnosticError" },
	DiagnosticSignHint = { link = "DiagnosticHint" },
	DiagnosticSignInfo = { link = "DiagnosticInfo" },
	DiagnosticSignOk = { link = "DiagnosticOk" },
	DiagnosticSignWarn = { link = "DiagnosticWarn" },
	DiagnosticUnderlineError = { sp = palette.red, undercurl = true },
	DiagnosticUnderlineHint = { sp = palette.orange, undercurl = true },
	DiagnosticUnderlineInfo = { sp = palette.cayn, undercurl = true },
	DiagnosticUnderlineOk = { sp = palette.blue, undercurl = true },
	DiagnosticUnderlineWarn = { sp = palette.yellow, undercurl = true },
	DiagnosticVirtualTextError = { fg = palette.red, bg = palette.red, blend = 10 },
	DiagnosticVirtualTextHint = { fg = palette.orange, bg = palette.orange, blend = 10 },
	DiagnosticVirtualTextInfo = { fg = palette.cayn, bg = palette.cayn, blend = 10 },
	DiagnosticVirtualTextOk = { fg = palette.blue, bg = palette.blue, blend = 10 },
	DiagnosticVirtualTextWarn = { fg = palette.yellow, bg = palette.yellow, blend = 10 },

	Boolean = { fg = palette.yellow },
	Character = { fg = palette.yellow },
	Comment = { fg = palette.gray },
	Conditional = { fg = palette.blue },
	Constant = { fg = palette.yellow },
	Debug = { fg = palette.rose },
	Define = { fg = palette.orange },
	Delimiter = { fg = palette.lightgray },
	Error = { fg = palette.red },
	Exception = { fg = palette.blue },
	Float = { fg = palette.yellow },
	Function = { fg = palette.rose },
	Identifier = { fg = palette.foreground },
	Include = { fg = palette.blue },
	Keyword = { fg = palette.blue },
	Label = { fg = palette.cayn },
	LspCodeLens = { fg = palette.lightgray },
	LspCodeLensSeparator = { fg = palette.nc },
	LspInlayHint = { fg = palette.nc, bg = palette.muted, blend = 10 },
	LspReferenceRead = { bg = palette.highlight },
	LspReferenceText = { bg = palette.highlight },
	LspReferenceWrite = { bg = palette.highlight },
	Macro = { fg = palette.orange },
	Number = { fg = palette.yellow },
	Operator = { fg = palette.lightgray },
	PreCondit = { fg = palette.orange },
	PreProc = { link = "PreCondit" },
	Repeat = { fg = palette.blue },
	Special = { fg = palette.cayn },
	SpecialChar = { link = "Special" },
	SpecialComment = { fg = palette.orange },
	Statement = { fg = palette.blue, bold = true },
	StorageClass = { fg = palette.cayn },
	String = { fg = palette.green },
	Structure = { fg = palette.cayn },
	Tag = { fg = palette.yellow },
	Todo = { fg = palette.rose, bg = palette.rose, blend = 20 },
	Type = { fg = palette.cayn },
	TypeDef = { link = "Type" },
	Underlined = { fg = palette.orange, underline = true },

	healthError = { fg = palette.red },
	healthSuccess = { fg = palette.cayn },
	healthWarning = { fg = palette.yellow },

	htmlArg = { fg = palette.blue },
	htmlBold = { bold = true },
	htmlEndTag = { fg = palette.lightgray },
	htmlH1 = { link = "markdownH1" },
	htmlH2 = { link = "markdownH2" },
	htmlH3 = { link = "markdownH3" },
	htmlH4 = { link = "markdownH4" },
	htmlH5 = { link = "markdownH5" },
	htmlItalic = { italic = true },
	htmlLink = { link = "markdownUrl" },
	htmlTag = { fg = palette.lightgray },
	htmlTagN = { fg = palette.foreground },
	htmlTagName = { fg = palette.yellow },

	markdownDelimiter = { fg = palette.lightgray },
	markdownH1 = { fg = palette.orange, bold = true },
	markdownH1Delimiter = { link = "markdownH1" },
	markdownH2 = { fg = palette.cayn, bold = true },
	markdownH2Delimiter = { link = "markdownH2" },

	markdownH3 = { fg = palette.rose, bold = true },
	markdownH3Delimiter = { link = "markdownH3" },
	markdownH4 = { fg = palette.yellow, bold = true },
	markdownH4Delimiter = { link = "markdownH4" },
	markdownH5 = { fg = palette.blue, bold = true },
	markdownH5Delimiter = { link = "markdownH5" },
	markdownH6 = { fg = palette.green, bold = true },
	markdownH6Delimiter = { link = "markdownH6" },
	markdownLinkText = { link = "markdownUrl" },
	markdownUrl = { fg = palette.orange, sp = palette.orange, underline = true },

	mkdCode = { fg = palette.cayn },
	mkdCodeDelimiter = { fg = palette.rose },
	mkdCodeEnd = { fg = palette.cayn },
	mkdCodeStart = { fg = palette.cayn },
	mkdFootnotes = { fg = palette.cayn },
	mkdID = { fg = palette.cayn, underline = true },
	mkdInlineURL = { link = "markdownUrl" },
	mkdLink = { link = "markdownUrl" },
	mkdLinkDef = { link = "markdownUrl" },
	mkdListItemLine = { fg = palette.foreground },
	mkdRule = { fg = palette.lightgray },
	mkdURL = { link = "markdownUrl" },

	--- Identifiers
	["@variable"] = { fg = palette.foreground },
	["@variable.builtin"] = { fg = palette.yellow, bold = true },
	["@variable.parameter"] = { fg = palette.foreground },
	["@variable.member"] = { fg = palette.cayn },

	["@constant"] = { fg = palette.yellow },
	["@constant.builtin"] = { fg = palette.yellow, bold = true },
	["@constant.macro"] = { fg = palette.yellow },

	["@module"] = { fg = palette.foreground },
	["@module.builtin"] = { fg = palette.foreground, bold = true },
	["@label"] = { link = "Label" },

	--- Literals
	["@string"] = { link = "String" },
	-- ["@string.documentation"] = {},
	["@string.regexp"] = { fg = palette.orange },
	["@string.escape"] = { fg = palette.blue },
	["@string.special"] = { link = "String" },
	["@string.special.symbol"] = { link = "Identifier" },
	["@string.special.url"] = { fg = palette.orange },
	-- ["@string.special.path"] = {},

	["@character"] = { link = "Character" },
	["@character.special"] = { link = "Character" },

	["@number.float"] = { link = "Number" },
	["@float"] = { link = "Number" },

	--- Types
	["@type"] = { fg = palette.cayn },
	["@type.builtin"] = { fg = palette.cayn, bold = true },
	-- ["@type.definition"] = {},
	-- ["@type.qualifier"] = {},

	-- ["@attribute"] = {},
	["@property"] = { fg = palette.cayn },

	--- Functions
	["@function"] = { fg = palette.rose },
	["@function.builtin"] = { fg = palette.rose, bold = true },
	-- ["@function.call"] = {},
	["@function.macro"] = { link = "Function" },
	["@function.method"] = { fg = palette.rose },
	["@function.method.call"] = { fg = palette.cayn },

	["@constructor"] = { fg = palette.rose },
	["@operator"] = { link = "Operator" },

	--- Keywords
	["@keyword"] = { link = "Keyword" },
	-- ["@keyword.coroutine"] = {},
	-- ["@keyword.function"] = {},
	["@keyword.operator"] = { fg = palette.lightgray },
	["@keyword.import"] = { fg = palette.blue },
	["@keyword.storage"] = { fg = palette.cayn },
	["@keyword.repeat"] = { fg = palette.blue },
	["@keyword.return"] = { fg = palette.blue },
	["@keyword.debug"] = { fg = palette.rose },
	["@keyword.exception"] = { fg = palette.blue },
	["@keyword.conditional"] = { fg = palette.blue },
	["@keyword.conditional.ternary"] = { fg = palette.blue },
	["@keyword.directive"] = { fg = palette.orange },
	["@keyword.directive.define"] = { fg = palette.orange },

	--- Punctuation
	["@punctuation.delimiter"] = { fg = palette.lightgray },
	["@punctuation.bracket"] = { fg = palette.lightgray },
	["@punctuation.special"] = { fg = palette.lightgray },

	--- Comments
	["@comment"] = { link = "Comment" },
	-- ["@comment.documentation"] = {},

	["@comment.error"] = { fg = palette.red },
	["@comment.warning"] = { fg = palette.yellow },
	["@comment.todo"] = { fg = palette.rose, bg = palette.rose, blend = 20 },
	["@comment.hint"] = { fg = palette.orange, bg = palette.orange, blend = 20 },
	["@comment.info"] = { fg = palette.cayn, bg = palette.cayn, blend = 20 },
	["@comment.note"] = { fg = palette.cayn, bg = palette.cayn, blend = 20 },

	--- Markup
	["@markup.strong"] = { bold = true },
	["@markup.italic"] = { italic = true },
	["@markup.strikethrough"] = { strikethrough = true },
	["@markup.underline"] = { underline = true },

	["@markup.heading"] = { fg = palette.cayn, bold = true },

	["@markup.quote"] = { fg = palette.foreground },
	["@markup.math"] = { link = "Special" },
	["@markup.environment"] = { link = "Macro" },
	["@markup.environment.name"] = { link = "@type" },

	-- ["@markup.link"] = {},
	["@markup.link.markdown_inline"] = { fg = palette.lightgray },
	["@markup.link.label.markdown_inline"] = { fg = palette.cayn },
	["@markup.link.url"] = { fg = palette.green },

	-- ["@markup.raw"] = { bg = palette.surface },
	-- ["@markup.raw.block"] = { bg = palette.surface },
	["@markup.raw.delimiter.markdown"] = { fg = palette.lightgray },

	["@markup.list"] = { fg = palette.blue },
	["@markup.list.checked"] = { fg = palette.cayn, bg = palette.cayn, blend = 10 },
	["@markup.list.unchecked"] = { fg = palette.foreground },

	-- Markdown headings
	["@markup.heading.1.markdown"] = { link = "markdownH1" },
	["@markup.heading.2.markdown"] = { link = "markdownH2" },
	["@markup.heading.3.markdown"] = { link = "markdownH3" },
	["@markup.heading.4.markdown"] = { link = "markdownH4" },
	["@markup.heading.5.markdown"] = { link = "markdownH5" },
	["@markup.heading.6.markdown"] = { link = "markdownH6" },
	["@markup.heading.1.marker.markdown"] = { link = "markdownH1Delimiter" },
	["@markup.heading.2.marker.markdown"] = { link = "markdownH2Delimiter" },
	["@markup.heading.3.marker.markdown"] = { link = "markdownH3Delimiter" },
	["@markup.heading.4.marker.markdown"] = { link = "markdownH4Delimiter" },
	["@markup.heading.5.marker.markdown"] = { link = "markdownH5Delimiter" },
	["@markup.heading.6.marker.markdown"] = { link = "markdownH6Delimiter" },

	["@diff.plus"] = { fg = palette.blue, bg = palette.blue, blend = 20 },
	["@diff.minus"] = { fg = palette.red, bg = palette.red, blend = 20 },
	["@diff.delta"] = { bg = palette.rose, blend = 20 },

	["@tag"] = { link = "Tag" },
	["@tag.attribute"] = { fg = palette.orange },
	["@tag.delimiter"] = { fg = palette.lightgray },

	--- Non-highlighting captures
	-- ["@none"] = {},
	["@conceal"] = { link = "Conceal" },
	["@conceal.markdown"] = { fg = palette.lightgray },

	-- ["@spell"] = {},
	-- ["@nospell"] = {},

	--- Semantic
	["@lsp.type.comment"] = {},
	["@lsp.type.comment.c"] = { link = "@comment" },
	["@lsp.type.comment.cpp"] = { link = "@comment" },
	["@lsp.type.enum"] = { link = "@type" },
	["@lsp.type.interface"] = { link = "@interface" },
	["@lsp.type.keyword"] = { link = "@keyword" },
	["@lsp.type.namespace"] = { link = "@namespace" },
	["@lsp.type.namespace.python"] = { link = "@variable" },
	["@lsp.type.parameter"] = { link = "@parameter" },
	["@lsp.type.property"] = { link = "@property" },
	["@lsp.type.variable"] = {}, -- defer to treesitter for regular variables
	["@lsp.type.variable.svelte"] = { link = "@variable" },
	["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
	["@lsp.typemod.operator.injected"] = { link = "@operator" },
	["@lsp.typemod.string.injected"] = { link = "@string" },
	["@lsp.typemod.variable.constant"] = { link = "@constant" },
	["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
	["@lsp.typemod.variable.injected"] = { link = "@variable" },

	FloatBorder = { fg = palette.nc, bg = "NONE" },
	FloatTitle = { fg = palette.cayn, bg = "NONE", bold = true },
	Folded = { fg = palette.foreground, bg = "NONE" },
	NormalFloat = { bg = "NONE" },
	Normal = { fg = palette.foreground, bg = "NONE" },
	NormalNC = { fg = palette.foreground, bg = palette.nc },
	Pmenu = { fg = palette.lightgray, bg = "NONE" },
	PmenuKind = { fg = palette.cayn, bg = "NONE" },
	SignColumn = { fg = palette.foreground, bg = "NONE" },
	StatusLine = { fg = palette.lightgray, bg = "NONE" },
	StatusLineNC = { fg = palette.nc, bg = "NONE" },
	TabLine = { bg = "NONE", fg = palette.lightgray },
	TabLineFill = { bg = "NONE" },
	TabLineSel = { fg = palette.foreground, bg = "NONE", bold = true },

	-- ["@markup.raw"] = { bg = "none" },
	["@markup.raw.markdown_inline"] = { fg = palette.yellow },
	-- ["@markup.raw.block"] = { bg = "none" },
}

return highlights
